public class ScheduleEventRepository : IScheduleEventRepository
{
    private readonly Container _container;

    public ScheduleEventRepository(CosmosClient cosmosClient, string databaseName, string containerName)
    {
        _container = cosmosClient.GetContainer(databaseName, containerName);
    }

    public async Task AddAsync(ScheduleEvent scheduleEvent)
    {
        await _container.CreateItemAsync(scheduleEvent, new PartitionKey(scheduleEvent.Id));
    }

    public async Task<ScheduleEvent> GetByIdAsync(string id)
    {
        try
        {
            ItemResponse<ScheduleEvent> response = await _container.ReadItemAsync<ScheduleEvent>(id, new PartitionKey(id));
            return response.Resource;
        }
        catch (CosmosException ex) when (ex.StatusCode == HttpStatusCode.NotFound)
        {
            return null;
        }
    }

    public async Task UpdateAsync(ScheduleEvent scheduleEvent)
    {
        await _container.UpsertItemAsync(scheduleEvent, new PartitionKey(scheduleEvent.Id));
    }

    public async Task DeleteAsync(string id)
    {
        await _container.DeleteItemAsync<ScheduleEvent>(id, new PartitionKey(id));
    }

    public async Task<IEnumerable<ScheduleEvent>> GetItemsAsync(Expression<Func<ScheduleEvent, bool>> predicate)
    {
        var query = _container.GetItemLinqQueryable<ScheduleEvent>()
            .Where(predicate)
            .ToFeedIterator();

        List<ScheduleEvent> results = new List<ScheduleEvent>();
        while (query.HasMoreResults)
        {
            var response = await query.ReadNextAsync();
            results.AddRange(response.ToList());
        }

        return results;
    }
}

public class EventLogRepository : IEventLogRepository
{
    private readonly Container _container;

    public EventLogRepository(CosmosClient cosmosClient, string databaseName, string containerName)
    {
        _container = cosmosClient.GetContainer(databaseName, containerName);
    }

    public async Task AddAsync(EventLog eventLog)
    {
        await _container.CreateItemAsync(eventLog, new PartitionKey(eventLog.LogDate.ToString()));
    }

    public async Task<EventLog> GetByIdAsync(string eventId, DateOnly logDate)
    {
        try
        {
            ItemResponse<EventLog> response = await _container.ReadItemAsync<EventLog>(eventId, new PartitionKey(logDate.ToString()));
            return response.Resource;
        }
        catch (CosmosException ex) when (ex.StatusCode == HttpStatusCode.NotFound)
        {
            return null;
        }
    }

    public async Task UpdateAsync(EventLog eventLog)
    {
        await _container.UpsertItemAsync(eventLog, new PartitionKey(eventLog.LogDate.ToString()));
    }

    public async Task DeleteAsync(string eventId, DateOnly logDate)
    {
        await _container.DeleteItemAsync<EventLog>(eventId, new PartitionKey(logDate.ToString()));
    }

    public async Task<IEnumerable<EventLog>> GetItemsAsync(Expression<Func<EventLog, bool>> predicate)
    {
        var query = _container.GetItemLinqQueryable<EventLog>()
            .Where(predicate)
            .ToFeedIterator();

        List<EventLog> results = new List<EventLog>();
        while (query.HasMoreResults)
        {
            var response = await query.ReadNextAsync();
            results.AddRange(response.ToList());
        }

        return results;
    }
	public async Task<IEnumerable<EventLog>> GetEventLogsUpToTodayAsync()
{
    var today = DateOnly.FromDateTime(DateTime.UtcNow);
    var query = _container.GetItemLinqQueryable<EventLog>()
        .Where(log => log.LogDate <= today)
        .ToFeedIterator();

    List<EventLog> results = new List<EventLog>();
    while (query.HasMoreResults)
    {
        var response = await query.ReadNextAsync();
        results.AddRange(response.ToList());
    }

    return results;
}

//servicelayer

public async Task<IEnumerable<EventLog>> GetValidEventLogsAsync()
{
    var allEventLogs = await _eventLogRepository.GetEventLogsUpToTodayAsync();
    var validLogs = new List<EventLog>();

    foreach (var log in allEventLogs)
    {
        var scheduleEvent = await _scheduleEventRepository.GetByIdAsync(log.EventId);
        if (scheduleEvent != null && (scheduleEvent.EndDate == null || scheduleEvent.EndDate > DateTime.UtcNow))
        {
            validLogs.Add(log);
        }
    }

    return validLogs;
}

}
