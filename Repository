public class Repository<T, TKey> : IRepository<T, TKey> where T : IPrimaryKey<TKey>
{
    private readonly Container _container;

    public Repository(CosmosClient dbClient, string databaseName, string containerName)
    {
        _container = dbClient.GetContainer(databaseName, containerName);
    }

    public async Task<T> GetByIdAsync(TKey id, TKey partitionKey)
    {
        try
        {
            var entity = Activator.CreateInstance<T>();
            ItemResponse<T> response = await _container.ReadItemAsync<T>(id.ToString(), new PartitionKey(partitionKey.ToString()), new ItemRequestOptions { PartitionKeyPath = entity.PartitionKeyName });
            return response.Resource;
        }
        catch (CosmosException ex) when (ex.StatusCode == HttpStatusCode.NotFound)
        {
            return default;
        }
    }

    public async Task AddAsync(T entity)
    {
        await _container.CreateItemAsync(entity, new PartitionKey(entity.PartitionKey.ToString()));
    }

    public async Task UpdateAsync(T entity)
    {
        await _container.UpsertItemAsync(entity, new PartitionKey(entity.PartitionKey.ToString()));
    }

    public async Task DeleteAsync(TKey id, TKey partitionKey)
    {
        var entity = Activator.CreateInstance<T>();
        await _container.DeleteItemAsync<T>(id.ToString(), new PartitionKey(partitionKey.ToString()));
    }
}